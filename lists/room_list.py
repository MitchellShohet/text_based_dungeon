import random
from classes.dungeon.room_components import Exit, MonsterSpawning
from classes.dungeon.room import Room
from lists.monsters_list import Goblin, Skeleton, Wizard, MudGolem, Minotaur, Avatar, MagmaGoblin, FlyingGoblin
from lists.interactables_list import Owl, Pool, Breakable, Chasm, RedHerring, GlowingCrystal, ExitHold, Chest, MagmaRiver, MoneyTree, Tree, Cauldron, NPC, ShopOwner, GlowingTree, Fairy
from lists.items_lists import weapon_options, armor_options, misc_options, HealthPotion, StatMedallion, PowerBerry, DurabilityGem, MagicWand, SmokeBomb, GreaterHealthPotion
from lists.adjustments_list import block_exit, break_the_table, add_interactable, add_owl, teleport_sequence, add_to_interactable, money_tree_refresh, add_to_description, change_room, add_monsters, change_monster_spawning, shop_refresh, sea_creature_defeated, tree_inspect_renew, damage_player

room_list = [ 
    [
        Room("Placeholder Rooms Maxed", 
            'A deadend with a sign that reads "Sorry, more rooms will be added soon!"', 
            [Exit(0), Exit(1)]) #the second exit needs to be removed when this room is updated (maybe)
        ],
    [
        Room("DUNGEON ENTRANCE", 
            "Here's a short placeholder description about the Dungeon Entrance.", 
            [Exit(0, Room("Go Home", 
                        "You decide not to explore the dungeon. Probably a good idea.", 
                        None)), Exit(1), Exit(2)]),
        # Room("Pond Room", 
        #     "A room with a small pond.", 
        #     [Exit(0), Exit(1), Exit(2)], 
        #     MonsterSpawning(1, Goblin, 5, Skeleton), 
        #     [Pool(0, ["SWIM", "THROW ROCKS"], "that doesn't look too deep.")],
        #     [[add_to_interactable, add_to_description],
        #         [sea_creature_defeated], 
        #         {"add_to_interactable" : [2, "INSPECT SHADOW"],
        #         "add_to_description" : [2, ".. Wait- there's a shadow in the water that wasn't there before."],
        #         "damage_player" : ["Your armor is too heavy to swim in!", 2]}]),
        # Room("Glowing Crystals Room", 
        #     "A room with some glowing crystals.", 
        #     [Exit(0), Exit(1), Exit(2), Exit(3)], 
        #     MonsterSpawning(5, Goblin, 8, Skeleton), 
        #     [GlowingCrystal(1, ["SHATTER", "INSPECT"], " human baby."), 
        #         GlowingCrystal(2, ["SHATTER", "INSPECT"], " chair."), 
        #         GlowingCrystal(3, ["SHATTER", "INSPECT"], "n adult horse.")]),
        # Room("Magma River", 
        #     "A 10ft wide river of magma flows in your path, blocking the exit opposite from you", 
        #     [Exit(0)], 
        #     MonsterSpawning(5, MagmaGoblin, 10, "TWICE"),
        #     [MagmaRiver(0, ["JUMP", "BUILD BRIDGE", "THROW ROCKS"], "")]),
        # Room("Money Tree Room",
        #     "A room with a money tree placeholder description lol",
        #     [Exit(0), Exit(1)],
        #     MonsterSpawning(5, Wizard),
        #     [MoneyTree(["PICK FRUIT", "CHOP"])],
        #     [[money_tree_refresh], [add_owl], {"money_tree_refresh" : [0], "add_owl" : [ Owl()]}]), ####change the number here to 4 post testing
        # Room("CHASM ROOM",
        #     "A narrow chasm",
        #     [Exit(0)],
        #     MonsterSpawning(7, FlyingGoblin, 10, "TWICE"),
        #     [Chasm(0, ["JUMP", "CROSS THE BRIDGE", "TAKE THE BRIDGE", "THROW ROCKS"], ". After a moment you hear it clanking against the hard stone below.", 5, "MAGIC")],
        #     [[], [], {"change_room" : [Exit(2, Room("Chasm Landing",
        #                                             "A hard stone landing, its a strange place for a mural to be.",
        #                                             [Exit(0), Exit(1)],
        #                                             None,
        #                                             [ExitHold("MURAL", "An ambitous painting of a marketplace. The artist ran out of space on the right.", ["OBSERVE"], " If you're being honest it's pretty amateurish.")],
        #                                             [[block_exit], [], {"block_exit" : [0, False]}]
        #                                             ))]}]),
        # Room("Hastily abandoned kitchen", 
        #     "This room has a large cauldron suspended over a recently extinguished fire pit", 
        #     [Exit(0), Exit(1), Exit(2)], 
        #     MonsterSpawning(5, Goblin, 8, Skeleton),
        #     [Cauldron(1, ["RELIGHT FIRE", "COOK"], ""),
        #         Chest(1, ["OPEN"], " without a lock."),
        #         Chest(2, ["BREAK THE LOCK", "USE A KEY"], " that looks kinda tough.", challenge=6, contents=[40, StatMedallion(), misc_options["SHIELD"]]),
        #         Chest(3, ["BREAK THE LOCK", "USE A KEY"], " that looks real tough.", challenge=10, contents=[armor_options["MAGIC PLATE"], weapon_options["BATTLE AXE"]]),
        #         Chest(4, ["BREAK THE LOCK", "USE A KEY"], " it looks pretty weak.", challenge=2, contents=[misc_options["KEY"]])]),
        # Room("Autumnal Forrest Room", 
        #     "A grove of maple trees, the leaves have changed color for the fall.", 
        #     [Exit(0), Exit(1), Exit(2), Exit(3)], 
        #     MonsterSpawning(5, Goblin, 8, Skeleton),
        #     [Tree(1, ["PICK FRUIT", "CHOP"], " maple"),
        #         Tree(2, ["PICK FRUIT", "CHOP"], " maple"),
        #         Tree(3, ["PICK FRUIT", "CHOP"], " maple"),
        #         Tree(4, ["PICK FRUIT", "CHOP"], " maple"),
        #         Tree(5, ["PICK FRUIT", "CHOP"], " maple"),
        #         Tree(6, ["PICK FRUIT", "CHOP"], " maple")],
        #     [[], [add_owl], {"add_owl" : [ Owl()]}]),
        # Room("Magic Tree Grove",
        #     "A small grove of three glowing birch trees, a sourceless breeze is gentle blowing here.",
        #     [Exit(0), Exit(1), Exit(2)],
        #     MonsterSpawning(1, Skeleton, 2, "TWICE"),
        #     [GlowingTree(1, ["PICK FRUIT", "CHOP", "INSPECT"], " glowing birch", challenge=6),
        #         GlowingTree(2, ["PICK FRUIT", "CHOP", "INSPECT"], " glowing birch", challenge=6),
        #         GlowingTree(3, ["CHOP"], " glowing birch sapling", challenge=3)],
        #     [[tree_inspect_renew], [add_owl], {"add_owl" : [Owl()]}]),
        # Room("Medium Magic Tree",
        #     "A large chamber with a glowing elm tree, a sourceless breeze is gently blowing here.",
        #     [Exit(0), Exit(1), Exit(2)],
        #     MonsterSpawning(1, Skeleton, 2, "TWICE"),
        #     [GlowingTree(0, ["PICK FRUIT", "CHOP", "INSPECT"], " glowing elm", challenge=10)],
        #     [[tree_inspect_renew], [add_owl], {"add_owl" : [Owl()]}]),
        # Room("GIANT SEQUOIA CHAMBER",
        #     "A massively expansive cavern with a glowing, giant sequoia tree in its center. A sourceless breeze is gentle blowing here.",
        #     [Exit(0), Exit(1), Exit(2)],
        #     MonsterSpawning(4, Minotaur),
        #     [GlowingTree(0, ["PICK FRUIT", "CHOP", "INSPECT"], " glowing giant sequoia", challenge=15)],
        #     [[tree_inspect_renew], [add_owl], {"add_owl" : [Owl()]}]),
        Room("Sleeping Quarters", 
            "A small room with a bedroll, an extinguished firepit, and some small trinkets on a raw wood table.", 
            [Exit(0), Exit(1), Exit(2)],
            interactables=[Breakable("TABLE", 0, ["CHOP"], " A short section of a tree trunk being used as a table. You can count 21 rings.", 0, 2, contents=misc_options["WOOD"])],
            adjustments=[[add_interactable, add_to_description], [break_the_table], {"add_interactable" : [3, NPC(0, 
                                                                                                                ["TALK", "ROB"], 
                                                                                                                " A short, teenage-looking, boy with pointed ears and a shaved head.", 
                                                                                                                "BILL", 
                                                                                                                ["he", "him", "his"], 
                                                                                                                ["Look it's not much but its quiet and I like it here.", "Hey hey hey that's mine! Get out!", "Get out."], 
                                                                                                                6)], 
                                                                                    "add_to_description" : [3, " A younger looking kid is hanging out and practicing some wood carving."]}]),
        Room("STELLA'S TRADE CAMP", 
            "A canvas tent opened in the front reveals a pleasent interior. Currently empty shelves as a woman in her 60's appears to be packing up.", 
            [Exit(0), Exit(1), Exit(2)],
            interactables=[ShopOwner(0, 
                            ["TALK", "ROB", "BUY", "SELL"], 
                            "Trader in her 60's. Her brown hair is in a high pony, and she's wearing square rimmed glasses.", 
                            "STELLA", 
                            ["she", "her", "hers"], 
                            ["Hey there friend, let me know if you have any questions about my wares!", "Hey I saw that! Drop it and get out of my shop!", "I'm not doing business with someone who tried to rob me. Scram!", "Ooh what do ya got?", "Pleasure doing buisiness with you!", "Mmm you don't really have anything to sell. Come back later, I'd love to see what you find!", "What's catching your eye?", "Afraid I'm all out of stock friend! I'll get some new items soon!"], 
                            10, 
                            [misc_options["GLOWING FRUIT"], misc_options["KEY"], misc_options["KEY"], HealthPotion(), HealthPotion(), HealthPotion(), HealthPotion(), HealthPotion(), HealthPotion(), PowerBerry(), PowerBerry(), PowerBerry(), PowerBerry(), PowerBerry(), PowerBerry(), PowerBerry(), PowerBerry(), PowerBerry(), DurabilityGem(), DurabilityGem(), DurabilityGem(), DurabilityGem(), SmokeBomb(), SmokeBomb(), SmokeBomb(), SmokeBomb(), GreaterHealthPotion(), GreaterHealthPotion(), GreaterHealthPotion(), GreaterHealthPotion(), StatMedallion(), StatMedallion(), StatMedallion(), armor_options["CHAINMAIL"], weapon_options["LONGSWORD"]])],
            adjustments=[[shop_refresh], 
                        [], 
                        {"shop_refresh" : [2, [misc_options["GLOWING FRUIT"], misc_options["KEY"], misc_options["KEY"], HealthPotion(), HealthPotion(), HealthPotion(), HealthPotion(), HealthPotion(), HealthPotion(), PowerBerry(), PowerBerry(), PowerBerry(), PowerBerry(), PowerBerry(), PowerBerry(), PowerBerry(), PowerBerry(), PowerBerry(), DurabilityGem(), DurabilityGem(), DurabilityGem(), DurabilityGem(), SmokeBomb(), SmokeBomb(), SmokeBomb(), SmokeBomb(), GreaterHealthPotion(), GreaterHealthPotion(), GreaterHealthPotion(), GreaterHealthPotion(), StatMedallion(), StatMedallion(), StatMedallion(), armor_options["CHAINMAIL"], weapon_options["LONGSWORD"]], "Good news friend, I just restocked my shop! Let me know if you have any questions.", "Hey there friend, let me know if you have any questions about my wares!"]}]),
        # Room("Goblin Swarm Room",
        #     "An open room with a huge stretch towards the exit, it smells of GOBLIN.",
        #     [Exit(0), Exit(1)],
        #     MonsterSpawning(100, Goblin),
        #     adjustments=[[add_monsters, change_monster_spawning],
        #                 [], 
        #                 {"add_monsters" : [1, 7, Goblin],
        #                 "change_monster_spawning" : [2, MonsterSpawning(1, Goblin, 3, "TWICE")]}]),
        Room("Fairy Room",
            "A shallow stone fountain with a few inches of standing water. A fairy floats about, as the theme from Zelda plays.",
            [Exit(0)],
            None,
            [Fairy(0, 
                    "A young looking humanlike creature, with pointy ears and dragonfly wings", 
                    "Kane", 
                    ["she", "her", "hers"], 
                    ["You look silly.", "Are you kidding?? I could eat you, give it back!", "You're a jerk, I don't hang out with jerks. Jerk", "Yeah I'll buy! Got anything stinky?", "This looks fun! Thanks!", "Nothing you have looks that interesting.", "Sure, I can teleport you to a room you've been to! It'll cost you though, 40 dollar bills or 20 blades of grass!", "Sweet!! Where to?", "All right, see you later!"],
                    6)]),
        #Room("Hallway", "Placeholder for a hallway", [Exit(0), Exit(1)], MonsterSpawning(5, Goblin, 8, "TWICE")),
        #Room("Hallway", "Placeholder for a hallway", [Exit(0), Exit(1)], MonsterSpawning(5, Goblin, 8, "TWICE")),
        #Room("Hallway", "Placeholder for a hallway", [Exit(0), Exit(1)], MonsterSpawning(5, Goblin, 8, "TWICE")),
        #Room("Hallway", "Placeholder for a hallway", [Exit(0), Exit(1)], MonsterSpawning(5, Goblin, 8, "TWICE")),
        #Room("Hallway", "Placeholder for a hallway", [Exit(0), Exit(1)], MonsterSpawning(5, Goblin, 8, "TWICE")),
        #Room("Hallway", "Placeholder for a hallway", [Exit(0), Exit(1)], MonsterSpawning(5, Goblin, 8, "TWICE")),
        # Room("Deadend", "Placeholder for a deadend", [Exit(0)], MonsterSpawning(5, Goblin, 8, Skeleton)),
        # Room("Deadend", "Placeholder for a deadend", [Exit(0)], MonsterSpawning(5, Goblin, 8, Skeleton)),
        # Room("Deadend", "Placeholder for a deadend", [Exit(0)], MonsterSpawning(5, Goblin, 8, Skeleton)),
        # Room("Deadend", "Placeholder for a deadend", [Exit(0)], MonsterSpawning(5, Goblin, 8, Skeleton)),
        # Room("Deadend", "Placeholder for a deadend", [Exit(0)], MonsterSpawning(5, Goblin, 8, Skeleton)),
        # Room("Deadend", "Placeholder for a deadend", [Exit(0)], MonsterSpawning(5, Goblin, 8, Skeleton)),
        # Room("Deadend", "Placeholder for a deadend", [Exit(0)], MonsterSpawning(5, Goblin, 8, Skeleton)),
        # Room("Deadend", "Placeholder for a deadend", [Exit(0)], MonsterSpawning(5, Goblin, 8, Skeleton)),
        # Room("Deadend", "Placeholder for a deadend", [Exit(0)], MonsterSpawning(5, Goblin, 8, Skeleton)),
        # Room("Deadend", "Placeholder for a deadend", [Exit(0)], MonsterSpawning(5, Goblin, 8, Skeleton)),
        # Room("Deadend", "Placeholder for a deadend", [Exit(0)], MonsterSpawning(5, Goblin, 8, Skeleton)),
        # Room("Deadend", "Placeholder for a deadend", [Exit(0)], MonsterSpawning(5, Goblin, 8, Skeleton)),
        # Room("Deadend", "Placeholder for a deadend", [Exit(0)]),
        # Room("Deadend", "Placeholder for a deadend", [Exit(0)]),
        # Room("Deadend", "Placeholder for a deadend", [Exit(0)]),
        # Room("Deadend", "Placeholder for a deadend", [Exit(0)]),
        # Room("Deadend", "Placeholder for a deadend", [Exit(0)]),
        # Room("Deadend", "Placeholder for a deadend", [Exit(0)]),
        # Room("SECOND FLOOR TUNNEL", 
        #     "A narrow tunnel softly spiraling downward. This is the path to the dungeon's second floor, necessary to finding the idol.", 
        #     [Exit(0), Exit(1, Room("SECOND FLOOR LANDING", 
        #                                 "The entrance chamber to the second floor is built of smooth, blue bricks. Decorative pillars dot the edges, and an archway leads to three exits leading deeper into the dungeon.", 
        #                                 exits=[Exit(0), Exit(1), Exit(2), Exit(3)]))])
        ],
    [
        Room("Second Floor Test", "Second Floor test Room1", [Exit(0), Exit(1), Exit(2)], MonsterSpawning(6, Wizard, 10, "TWICE")),
        Room("Second Floor Test", "Second Floor test Room2", [Exit(0), Exit(1), Exit(2)], MonsterSpawning(6, Wizard, 9, MudGolem)),
        Room("Second Floor Test", "Second Floor test Room3", [Exit(0), Exit(1), Exit(2)], MonsterSpawning(4, Skeleton, 8, "TWICE")),
        Room("Second Floor Test", "Second Floor test Room4", [Exit(0), Exit(1), Exit(2)], MonsterSpawning(5, Wizard)),
        Room("Second Floor Test", "Second Floor test Room5", [Exit(0), Exit(1), Exit(2)], MonsterSpawning(5, Wizard)),
        Room("Second Floor Test", "Second Floor test Room6", [Exit(0), Exit(1), Exit(2)], MonsterSpawning(5, Wizard)),
        # Room("Second Floor Test", "Second Floor test Room", [Exit(0), Exit(1), Exit(2)], MonsterSpawning(7, MudGolem)),
        # Room("Second Floor Test", "Second Floor test Room", [Exit(0), Exit(1), Exit(2)], MonsterSpawning(5, Wizard)),
        # Room("Hallway", "Placeholder for a hallway", [Exit(0), Exit(1)], MonsterSpawning(5, Goblin, 8, "TWICE")),
        # Room("Hallway", "Placeholder for a hallway", [Exit(0), Exit(1)], MonsterSpawning(5, Goblin, 8, "TWICE")),
        # Room("Hallway", "Placeholder for a hallway", [Exit(0), Exit(1)], MonsterSpawning(5, Goblin, 8, "TWICE")),
        Room("FINAL FLOOR TUNNEL", "An ornate set of smoothly carved, stone, stairs descending downward for a mile. This is the path to the dungeon's final floor, where you can find the idol and the exit.", [Exit(0), Exit(1, (Room("FINAL FLOOR LANDING", "The entrance chamber to the final floor is flooded with knee high, glowing, green, liquid. Wading into the chamber, you see the paths ahead are lined with rows of stone fangs.", [Exit(0), Exit(1), Exit(2), Exit(3)])))])
        ],
    [
        Room("Final Floor Test", "Final Floor test Room1", [Exit(0), Exit(1), Exit(2)], MonsterSpawning(4, Wizard, 8, "TWICE")),
        # Room("Final Floor Test", "Final Floor test Room", [Exit(0), Exit(1), Exit(2)], MonsterSpawning(1, Skeleton, 4, "TWICE"), [], [Skeleton(), Skeleton()]),
        Room("Final Floor Test", "Final Floor test Room3", [Exit(0), Exit(1), Exit(2)], MonsterSpawning(7, Minotaur)),
        Room("Final Floor Test", "Final Floor test Room4", [Exit(0), Exit(1), Exit(2)], MonsterSpawning(7, Minotaur)),
        Room("Final Floor Test", "Final Floor test Room5", [Exit(0), Exit(1), Exit(2)], MonsterSpawning(5, MudGolem, 10, "TWICE")),
        Room("Final Floor Test", "Final Floor test Room6", [Exit(0), Exit(1), Exit(2)], MonsterSpawning(2, MudGolem)),


        ]

]